generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  id               String           @id @default(uuid())
  userId           String           @unique
  height           Float?
  weight           Float?
  subscriptionType String           @default("free")
  experienceLevel  ExperienceLevel?
  fitnessGoals     String?
  sessionTime      Int?
  weeklySession    Int?
  birthdate        DateTime?
  userWeights      UserWeight[]
  isNewUser        Boolean          @default(true)
  hasSeenWizard   Boolean   @default(false) // New field to track wizard status

}

model UserWeight {
  id         String   @id @default(uuid())
  userId     String
  weight     Float
  recordedAt DateTime @default(now())
  user       UserInfo @relation(fields: [userId], references: [userId])
}

model Exercise {
  id                  String                @id @default(uuid())
  name                String
  aliases             String[]
  primary_muscles     Muscle[]
  secondary_muscles   Muscle[]
  force               ForceType?
  level               LevelType
  mechanic            MechanicType?
  equipment           EquipmentType?
  category            CategoryType
  instructions        String[]
  description         String?
  tips                String[]
  image               String?
  date_created        DateTime              @default(now())
  date_updated        DateTime?             @default(now())
  isPremium           Boolean               @default(false)
  favouritedBy        FavouriteExercise[]
  userPBs             UserExercisePB[]
  userGoals           UserGoal[]
  logExercises        WorkoutLogExercise[]
  WorkoutPlanExercise WorkoutPlanExercise[]
}

model FavouriteExercise {
  userId       String
  favouritedAt DateTime @default(now())
  exerciseId   String
  exercise     Exercise @relation(fields: [exerciseId], references: [id])

  @@id([userId, exerciseId])
}

model WorkoutPlan {
  id                    String                @id @default(uuid())
  name                  String
  userId                String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  notes                 String?
  isSystemRoutine       Boolean               @default(false)
  systemRoutineCategory String?
  logs                  WorkoutLog[]
  WorkoutPlanExercise   WorkoutPlanExercise[]
}

model WorkoutPlanExercise {
  id               String       @id @default(uuid())
  workoutPlanId    String
  exerciseId       String
  sets             Int
  reps             Int?
  exerciseDuration Int?
  order            Int?
  trackingType     TrackingType
  Exercise         Exercise     @relation(fields: [exerciseId], references: [id])
  WorkoutPlan      WorkoutPlan  @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
}

model WorkoutImage {
  id            String   @id @default(uuid())
  imageUrl      String
  uploadedAt    DateTime @default(now())
  userId        String?
  currentWeight Float?
}

model WorkoutLog {
  id             String               @id @default(uuid())
  userId         String
  workoutPlanId  String
  date           DateTime
  duration       Int
  inProgress     Boolean              @default(true)
  createdAt      DateTime             @default(now())
  date_updated   DateTime?            @default(now())
  UserExercisePB UserExercisePB[]     @relation("WorkoutLogToUserExercisePB")
  WorkoutPlan    WorkoutPlan          @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  exercises      WorkoutLogExercise[]
}

model WorkoutLogExercise {
  id           String       @id @default(uuid())
  workoutLogId String
  exerciseId   String
  trackingType TrackingType
  sets         SetLog[]
  Exercise     Exercise     @relation(fields: [exerciseId], references: [id])
  WorkoutLog   WorkoutLog   @relation(fields: [workoutLogId], references: [id], onDelete: Cascade)
}

model SetLog {
  id                   String             @id @default(uuid())
  workoutLogExerciseId String
  weight               Float?
  reps                 Int?
  exerciseDuration     Int?
  order                Int?
  isWarmUp             Boolean            @default(false)
  WorkoutLogExercise   WorkoutLogExercise @relation(fields: [workoutLogExerciseId], references: [id], onDelete: Cascade)
}

model UserExercisePB {
  userId           String
  exerciseId       String
  weight           Float
  reps             Int?
  exerciseDuration Int?
  createdAt        DateTime    @default(now())
  workoutLogId     String?
  exercise         Exercise    @relation(fields: [exerciseId], references: [id])
  WorkoutLog       WorkoutLog? @relation("WorkoutLogToUserExercisePB", fields: [workoutLogId], references: [id], onDelete: Cascade)

  @@id([userId, exerciseId])
}

model UserGoal {
  id         String   @id @default(uuid())
  userId     String
  exerciseId String
  goalType   GoalType
  goalValue  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Exercise   Exercise @relation(fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId, goalType])
}

model UserEquipment {
  userId        String
  equipmentType EquipmentType

  @@id([userId, equipmentType])
}

enum ExperienceLevel {
  beginner
  intermediate
  expert
}

enum GoalType {
  WEIGHT
}

enum TrackingType {
  reps
  duration
}

enum CategoryType {
  strength
  stretching
  plyometrics
  strongman
  powerlifting
  cardio
  olympic_weightlifting @map("olympic weightlifting")
}

enum EquipmentType {
  body_only     @map("body only")
  machine
  other
  foam_roll     @map("foam roll")
  kettlebells
  dumbbell
  cable
  barbell
  bands
  medicine_ball @map("medicine ball")
  exercise_ball @map("exercise ball")
  ez_curl_bar   @map("ez curl bar")
}

enum ForceType {
  pull
  push
  static
}

enum LevelType {
  beginner
  intermediate
  expert
}

enum MechanicType {
  compound
  isolation
}

enum Muscle {
  abdominals
  hamstrings
  adductors
  quadriceps
  biceps
  shoulders
  chest
  middle_back @map("middle back")
  calves
  glutes
  lower_back  @map("lower back")
  lats
  triceps
  traps
  forearms
  neck
  abductors
}
